<?xml version="1.0" encoding="UTF-8"?>

<!--
status 级别有8个：ALL,TRACE, DEBUG, INFO, WARN, ERROR ,FATAL,OFF。
是帮助开发者找错用的，它可以检测log4j 2的配置文件是否有错，也可以检测到死循环的logger
monitorInterval log4j2 自动检测配置文件的时间间隔（单位：秒）
-->
<configuration status="OFF" monitorInterval="30">

    <Properties>
        <!--
            日志输出格式，每个转换说明符以百分号(%)开头，'%'后面的转换字符有如下:
            p (level) 日志级别
            c（logger） Logger的Name
            C (class) Logger调用者的全限定类名
            d (date) 日期
            highlight 高亮颜色
            l (location) 调用位置
            L (line) 行号
            m (msg/message) 输出的内容
            M (methode) 调用方法 ***
            maker marker的全限定名
            n 输出平台相关的换行符,如'\n' '\r\n'
            pid (processId) 进程ID
            level （p）日志级别
            r JVM启动后经过的微秒
            t (tn/thread/threadName) 线程名称
            T (tid/threadId) 线程ID
            tp (threadPriority) 线程优先级
            x (NDC) 线程Context堆栈

            %5：若字符长度小于5，则右边用空格填充
            %-5若字符长度小于5，则左边用空格填充
            %.15：若字符长度超过15，截去多余字符，
            %15.15若字符长度小于5，则右边用空格填充；若字符长度超过15，截去多余字符
        -->
        <Property name="pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{%6p} %style{%5pid}{bright,magenta} --- [%15.15t] %style{%-40.40logger{39}}{bright,cyan} : %m%n
        </Property>
        <Property name="LOG_HOME" value="${sys:user.home}/logs"/>
        <property name="PROJECT_NAME" value="ppeng-user"/>
        <Property name="LOG_PATH">${LOG_HOME}/${PROJECT_NAME}</Property>
    </Properties>
    <Appenders>

        <!--
        设置在控制台打印日志
        将输出写到 System.err 或 System.out 。如果想将输出写到System.out，设置Console标签下的target为 SYSTEM_OUT ；
        如果想将输出写到System.err，设置Console标签下的target为 SYSTEM_ERR
        -->
        <!--设置在控制台打印日志-->
        <Console name="console" target="SYSTEM_OUT">
            <PatternLayout pattern="${pattern}"/>
        </Console>

        <!--
            设置级别为 DEBUG 日志输出到 debug.log 中
            日志写入策略 immediateFlush log4j2接收到日志事件时，是否立即将日志刷到磁盘。默认为true 。
            异步日志将会自动批量刷新到磁盘，所以这里设置为false
        -->
        <!--设置级别为 DEBUG 日志输出到 debug.log 中-->
        <RollingRandomAccessFile name="debug"
                                 immediateFlush="false"
                                 fileName="${LOG_PATH}/debug.log"
                                 filePattern="${LOG_PATH}/debug-%d{yyyy-MM-dd}.log">
            <Filters>
                <!--设置只输出级别为 debug 的日志-->
                <ThresholdFilter level="DEBUG"/>
                <ThresholdFilter level="INFO" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${pattern}"/>
            <Policies>
                <!--
                    根据时间生成日志文件
                    单位：以文件命名中的时间精度来确定单位。比如 yyyy-MM-dd 单位为天，yyyy-MM-dd-HH 单位为小时
                    interval：时间间隔
                -->
                <!-- 按天生成日志文件-->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
            <!-- 最多保存日志文件的数目 -->
            <DefaultRolloverStrategy max="15"/>
        </RollingRandomAccessFile>


        <RollingRandomAccessFile name="info"
                                 immediateFlush="false"
                                 fileName="${LOG_PATH}/info.log"
                                 filePattern="${LOG_PATH}/info-%d{yyyy-MM-dd}.log">
            <Filters>
                <ThresholdFilter level="INFO"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>

            </Filters>
            <PatternLayout pattern="${pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
            <DefaultRolloverStrategy max="60"/>
        </RollingRandomAccessFile>


        <RollingRandomAccessFile name="warn"
                                 immediateFlush="true"
                                 fileName="${LOG_PATH}/warn.log"
                                 filePattern="${LOG_PATH}/warn-%d{yyyy-MM-dd}.log">
            <Filters>
                <ThresholdFilter level="WARN"/>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
            <DefaultRolloverStrategy max="60"/>
        </RollingRandomAccessFile>


        <RollingRandomAccessFile name="error"
                                 immediateFlush="true"
                                 fileName="${LOG_PATH}/error.log"
                                 filePattern="${LOG_PATH}/error-%d{yyyy-MM-dd}.log">
            <PatternLayout pattern="${pattern}"/>
            <Filters>
                <ThresholdFilter level="ERROR"/>
            </Filters>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
            <DefaultRolloverStrategy max="60"/>
        </RollingRandomAccessFile>

    </Appenders>


    <!--共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
           All:最低等级的，用于打开所有日志记录.
           Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
           Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.
           Info:消息在粗粒度级别上突出强调应用程序的运行过程.
           Warn:输出警告及warn以下级别的日志.
           Error:输出错误信息日志.
           Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.
           OFF:最高等级的，用于关闭所有日志记录-->

    <Loggers>
        <Logger name="fun.zhub.ppeng" level="info" additivity="true">
            <AppenderRef ref="debug"/>
            <AppenderRef ref="info"/>
            <AppenderRef ref="warn"/>
            <AppenderRef ref="error"/>
        </Logger>
        <!-- org.springframework 只输出 ERROR 级别以上的日志 -->
        <Logger name="org.springframework" level="ERROR"/>
        <!-- org.apache 只输出 ERROR 级别以上的日志 -->
        <Logger name="org.apache" level="ERROR"/>
        <Root level="INFO">
            <AppenderRef ref="console"/>
        </Root>
    </Loggers>
</configuration>